# AWS Transit Gateway

## What is AWS Transit Gateway?

**AWS Transit Gateway (TGW)** is a highly scalable and fully managed service that acts as a **central hub** to connect multiple **VPCs**, **on-premises networks**, and **VPNs**. Instead of managing multiple peering connections between VPCs, Transit Gateway simplifies network architecture by providing a **hub-and-spoke model**.  

Transit Gateway **routes traffic efficiently** between connected networks and supports **centralized control, high availability, and routing policies**.

---

## Key Features of AWS Transit Gateway

1. **Centralized Connectivity**: Connect multiple VPCs and on-premises networks to a single hub.
2. **Simplified Network Management**: Eliminates the need for complex VPC-to-VPC peering mesh.
3. **High Scalability**: Supports thousands of VPCs and high traffic volume.
4. **Routing Control**: Supports **route tables**, **propagation**, and **segmentation** for traffic control.
5. **Integration with VPN & Direct Connect**: Connect on-premises data centers securely.
6. **Inter-Region Peering**: Connect Transit Gateways across AWS regions.
7. **Multicast Support**: For applications requiring efficient broadcast/multicast traffic.
8. **Centralized Security**: Integrates with **AWS Network Firewall**, **Security Groups**, and **NACLs**.

---

## AWS Transit Gateway Architecture

1. **Transit Gateway (Hub)**: Central router connecting multiple networks.
2. **Attachments**:
   - **VPC Attachment**: Connects a VPC to TGW.
   - **VPN Attachment**: Connects an on-premises VPN.
   - **Direct Connect Gateway Attachment**: Connects AWS Direct Connect.
3. **Route Tables**:
   - Define how traffic flows between attachments.
   - Supports **default routes** or **custom segmentation**.
4. **Propagation**:
   - Automatically shares routes from attached VPCs or VPNs to the TGW route table.
5. **Traffic Flow**:
   - VPC1 → TGW → VPC2 / VPN → On-premises network.

---

## Step-by-Step Guide to Configure AWS Transit Gateway

### Step 1: Create a Transit Gateway

1. Go to **AWS Management Console → VPC → Transit Gateways → Create Transit Gateway**.
2. Enter details:
   - Name: `MyTGW`
   - Amazon ASN (Autonomous System Number) for BGP (for VPN/Direct Connect)
   - Description: Optional
   - Default route table: Yes/No (choose default)
   - Enable DNS support and multicast if needed
3. Click **Create Transit Gateway**.

---

### Step 2: Attach VPCs to Transit Gateway

1. Go to **Transit Gateway → Transit Gateway Attachments → Create Attachment**.
2. Select:
   - **Attachment type**: VPC
   - **VPC**: Choose the VPC you want to attach
   - **Subnets**: Select at least one subnet per Availability Zone
3. Click **Create Attachment**.
4. Repeat for other VPCs you want to connect.

---

### Step 3: Update Route Tables

1. Go to **Transit Gateway Route Tables**.
2. Create or edit a **route table**:
   - Add routes to attached VPCs or VPN connections.
   - Propagate routes from attachments to the TGW route table for automatic updates.
3. Associate each attachment with the appropriate route table.
4. Configure **VPC route tables**:
   - Add a route pointing traffic destined for other VPCs or on-premises networks to the **Transit Gateway**.

---

### Step 4: Attach VPN or Direct Connect (Optional)

1. Go to **Transit Gateway → Attachments → Create Attachment**.
2. Select:
   - **Attachment type**: VPN or Direct Connect
   - **Customer Gateway**: Pre-configured on-premises device
   - **VPN options**: Static or dynamic routing (BGP)
3. Update **Transit Gateway Route Table** to propagate routes for on-prem networks.

---

### Step 5: Test Connectivity

1. Launch instances in different VPCs attached to TGW.
2. Ping or SSH from one VPC instance to another:
   ```bash
   ping 10.1.1.10  # Private IP in another VPC
````

3. Traffic should flow via **Transit Gateway**.
4. For VPN, verify traffic from on-premises to AWS VPC flows correctly.

---

## Practical Example: Connecting Multiple VPCs

### Scenario

* **VPC-A**: 10.0.0.0/16
* **VPC-B**: 10.1.0.0/16
* **VPC-C**: 10.2.0.0/16

Goal: Enable **full connectivity** between these VPCs without peering each pair.

### Step 1: Create Transit Gateway

* Name: `MyCompany-TGW`
* Enable DNS support: Yes
* Default route table: Enabled

### Step 2: Attach VPCs

* Attach VPC-A, VPC-B, and VPC-C to TGW using subnets in each AZ.

### Step 3: Configure TGW Route Table

* Add routes:

  * 10.0.0.0/16 → VPC-A attachment
  * 10.1.0.0/16 → VPC-B attachment
  * 10.2.0.0/16 → VPC-C attachment
* Enable **propagation** for all attachments.

### Step 4: Update VPC Route Tables

* In VPC-A, add routes:

  * 10.1.0.0/16 → Transit Gateway
  * 10.2.0.0/16 → Transit Gateway
* Repeat for VPC-B and VPC-C.

### Step 5: Verify Connectivity

* Launch EC2 instances in each VPC.
* Test ping or SSH:

  ```bash
  # From VPC-A instance
  ping 10.1.1.10  # VPC-B
  ping 10.2.1.10  # VPC-C
  ```
* All VPCs communicate via Transit Gateway without direct peering.

---

## Best Practices

1. Use **segmented TGW route tables** for security isolation.
2. Enable **DNS support** to resolve private names across VPCs.
3. Use **route propagation** for automatic updates.
4. Monitor TGW using **CloudWatch metrics**.
5. Plan **subnet allocation** carefully to avoid overlapping IP ranges.
6. For multi-region, consider **Transit Gateway Inter-Region Peering**.

---

## Summary

AWS Transit Gateway provides a **centralized hub** to connect multiple VPCs and on-premises networks efficiently. It simplifies network management, enhances scalability, and reduces operational complexity.

**Practical Example**: Multiple VPCs (VPC-A, VPC-B, VPC-C) connected via a Transit Gateway can communicate with each other without peering, with all routing centralized in the TGW route tables.

---

**References**:

* [AWS Transit Gateway Documentation](https://docs.aws.amazon.com/vpc/latest/tgw/what-is-transit-gateway.html)
* [AWS Transit Gateway Best Practices](https://aws.amazon.com/blogs/networking-and-content-delivery/transit-gateway-best-practices/)
